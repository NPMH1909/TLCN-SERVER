import { MAIL_CONFIG } from '../configs/mail.config.js'
import nodemailer from 'nodemailer'
import { generateOtp } from '../middlewares/useApiKey.middleware.js'
import { UserModel } from '../models/users.model.js'
import { BadRequestError } from '../errors/badRequest.error.js'
import { NotFoundError } from '../errors/notFound.error.js'
import cron from 'node-cron';
import { OrderService } from './order.service.js'
import { OrderModel } from '../models/orders.model.js'

const transporter = nodemailer.createTransport({
  port: 465,
  host: MAIL_CONFIG.SMTP_HOST,
  auth: {
    user: MAIL_CONFIG.GOOGLE_GMAIL,
    pass: MAIL_CONFIG.GOOGLE_KEY
  },
  secure: true,
  tls: {
    rejectUnauthorized: false, // Debug: Ch·∫•p nh·∫≠n ch·ª©ng ch·ªâ kh√¥ng h·ª£p l·ªá
  },

})
// const sendMail = ({ to, subject, html }) => {
//   const mailData = {
//     from: 'Mindx Restaurant',
//     to,
//     subject,
//     html
//   }
//   transporter.sendMail(mailData, (err, info) => {
//     if (err) {
//       return err
//     } else {
//       return info.messageId
//     }
//   })
// }
const sendMail = async ({ to, subject, html }) => {
  const mailData = {
    from: 'Mindx Restaurant',
    to,
    subject,
    html
  };

  return new Promise((resolve, reject) => {
    transporter.sendMail(mailData, (err, info) => {
      if (err) {
        reject(err); // N·∫øu l·ªói, tr·∫£ v·ªÅ l·ªói
      } else {
        resolve(info.messageId); // Tr·∫£ v·ªÅ messageId c·ªßa email
      }
    });
  });
};

const sendResetPasswordMail = async (to) => {
  const user = await UserModel.findOne({ email: to }).orFail(new NotFoundError('User not found'));
  
  const otp = generateOtp(); // T·∫°o OTP
  const otpExpiry = Date.now() + 15 * 60 * 1000; // OTP c√≥ hi·ªáu l·ª±c trong 15 ph√∫t

  // L∆∞u OTP v√† th·ªùi gian h·∫øt h·∫°n v√†o c∆° s·ªü d·ªØ li·ªáu
  await UserModel.findByIdAndUpdate(user._id, { otp });

  const subject = 'M√£ x√°c th·ª±c ƒë·ªÉ reset m·∫≠t kh·∫©u c·ªßa b·∫°n';
  const html = `<h1>M√£ x√°c th·ª±c reset m·∫≠t kh·∫©u</h1><p>M√£ c·ªßa b·∫°n l√†: <strong>${otp}</strong></p><p>OTP s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t.</p>`;
  
  transporter.sendMail({ to, subject, html }, (err, info) => {
    if (err) {
      throw err;
    } else {
      return info.messageId;
    }
  });
};

cron.schedule("*/600 * * * *", async () => {
  console.log("üîé Ki·ªÉm tra ƒë·∫∑t b√†n g·∫ßn ƒë·∫øn gi·ªù...");
  const bookings = await OrderService.getUpcomingBookings();
  if (bookings.length === 0) return; // Kh√¥ng c√≥ ƒë·∫∑t b√†n th√¨ b·ªè qua

  for (const booking of bookings) {
    const restaurantName = booking.restaurant_id.name || "Nh√† h√†ng";
    const bookingTime = new Date(booking.checkin);

    bookingTime.setHours(bookingTime.getHours() - 7); // C·ªông th√™m 7 gi·ªù

    const formattedTime = bookingTime.toLocaleString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });

    const message = `
      Xin ch√†o ${booking.name},

      B·∫°n c√≥ ƒë·∫∑t b√†n t·∫°i **${restaurantName}** v√†o l√∫c ${formattedTime}.
      Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù!

      C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!
    `;

    try {
      const result = await sendMail({
        to: booking.email,
        subject: `üìÖ Nh·∫Øc nh·ªü ƒë·∫∑t b√†n t·∫°i ${restaurantName}`,
        html: message
      });
      console.log("üì© Email g·ª≠i th√†nh c√¥ng:", result);
      await OrderModel.updateOne({ _id: booking._id }, { $set: { reminder_sent: true } });

    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i email:", error);
    }
  }
});

export const MailService = { sendMail, sendResetPasswordMail }
